{"version":3,"sources":["counter/button/button.tsx","counter/table/table.tsx","counter/ScoreMetr.tsx","counterSettings/ScoreMetrSettings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","incCounter","resetCounter","title","disabled","restProps","className","classNames","Table","counter","maxValue","startValue","startText","tableClassName","counterMax","ScoreMetr","props","disableInc","disableReset","onClick","disableIncState","ScoreMetrSettings","setMaxValue","setStartValue","setCounter","classNameStart","classNameCounterMax","disableSet","type","value","onChange","e","parseInt","currentTarget","setStartText","setDisableIncState","localStorage","setItem","JSON","stringify","App","useState","useEffect","start","getItem","max","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60409037.chunk.js","sourcesContent":["import React, {ButtonHTMLAttributes, DetailedHTMLProps, FC} from \"react\";\r\nimport classNames from  'classnames'\r\n\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype ButtonsType = DefaultButtonPropsType  & {\r\n    incCounter?:() => void\r\n    resetCounter?:() => void\r\n    title:string\r\n    disabled:boolean\r\n}\r\n\r\n export const Button:FC<ButtonsType> = ({incCounter , resetCounter,title,disabled, ...restProps}) => {\r\n    return (\r\n            <button {...restProps} className={classNames('pulse', {\r\n                'disable' : disabled\r\n            })} disabled={disabled}>\r\n                {title}\r\n            </button>\r\n    )\r\n}\r\n\r\n","import React, {FC} from \"react\";\r\nimport classNames from  'classnames'\r\n\r\ntype TablePropsType = {\r\n    counter: number\r\n    maxValue: number\r\n    startValue: number\r\n    startText: boolean\r\n\r\n}\r\n\r\nexport const Table: FC<TablePropsType> = ({counter, maxValue, startValue,startText,}) => {\r\n\r\n    const tableClassName = startValue < 0 || startValue === maxValue ||\r\n      startValue > maxValue\r\n    const counterMax = counter === maxValue ? 'maxCounter' : ''\r\n\r\n    return (\r\n\r\n        <div className={counterMax}>\r\n            {\r\n                startText\r\n                    ? <div  className='table'>set value</div>\r\n                    :\r\n                    tableClassName\r\n                ? <div className={classNames('table' , {\r\n                    'errorTable' : tableClassName\r\n                        })}>Error</div>\r\n                    : <div className='table'> {counter}</div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React, {FC} from \"react\";\r\nimport './ScoreMetr.css'\r\nimport {Button} from \"./button/button\";\r\nimport {Table} from \"./table/table\";\r\n\r\n\r\n\r\ntype ScoreMetrType = {\r\n    counter:number\r\n    incCounter:() => void\r\n    resetCounter:() => void\r\n    maxValue:number\r\n    startValue:number\r\n    startText: boolean\r\n    setStartText: (value: boolean) => void\r\n    disableIncState:boolean\r\n}\r\n\r\nexport const ScoreMetr:FC<ScoreMetrType> = ({counter,incCounter,resetCounter,maxValue,startValue, ...props }) => {\r\n\r\n    const disableInc =  maxValue === startValue  || maxValue < 0 || counter === maxValue || startValue <0 || startValue > maxValue\r\n    const disableReset = counter === 0 || maxValue === startValue  || maxValue < 0 || counter === startValue || counter < 0 || startValue > maxValue\r\n\r\n    return (\r\n        <div className={'counter'} >\r\n                <Table counter={counter} maxValue={maxValue} startValue={startValue}\r\n                       startText={props.startText}/>\r\n                   <div className='button-block'>\r\n                       <Button title='inc' onClick={()=>incCounter() } disabled={props.disableIncState || disableInc } />\r\n                       <Button onClick={()=>resetCounter()}  title='reset' disabled={disableReset} />\r\n                   </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, FC} from \"react\";\r\nimport './ScoreMetrSettings.css'\r\nimport {Button} from \"../counter/button/button\";\r\n\r\n\r\n\r\ntype ScoreMetrSettingsType = {\r\n    maxValue:number\r\n    startValue:number\r\n    setMaxValue:(n:number)=>void\r\n    setStartValue:(n:number)=>void\r\n    setCounter:(n:number)=>void\r\n    setStartText: (value: boolean) => void\r\n    setDisableIncState:(value:boolean) => void\r\n}\r\n\r\nexport const ScoreMetrSettings:FC<ScoreMetrSettingsType> = ({maxValue,startValue,setMaxValue,setStartValue,setCounter, ...props}) => {\r\n\r\n    const onChangeMax = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setMaxValue(parseInt(e.currentTarget.value))\r\n    }\r\n    const onChangeStart = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setStartValue(parseInt(e.currentTarget.value))\r\n    }\r\n\r\n    const setTask = () => {\r\n        props.setStartText(false)\r\n        props.setDisableIncState(false)\r\n        setCounter(startValue)\r\n        localStorage.setItem('startValue',JSON.stringify(startValue))\r\n        localStorage.setItem('maxValue',JSON.stringify(maxValue))\r\n    }\r\n    const classNameStart = startValue<0 || startValue === maxValue || maxValue < startValue ? 'error':''\r\n    const classNameCounterMax =  startValue === maxValue || maxValue < startValue ? 'error':''\r\n\r\n    const disableSet = startValue < 0 || maxValue === startValue || startValue > maxValue\r\n    return (\r\n        <div className={'counterSettings'} >\r\n               <div className='values'>\r\n                   <div>max value :</div>\r\n                   <input\r\n                       type=\"number\"\r\n                       className={classNameCounterMax}\r\n                       value={maxValue}\r\n                       onChange={onChangeMax} />\r\n                    <div>start value :</div>\r\n                    <input\r\n                        type=\"number\"\r\n                        value={startValue}\r\n                        onChange={onChangeStart}\r\n                        className={classNameStart}/>\r\n               </div>\r\n                <div>\r\n                    <Button title='set' disabled={disableSet} onClick={setTask } />\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {FC, useEffect, useState} from 'react';\nimport {ScoreMetr} from './counter/ScoreMetr';\nimport './App.css'\nimport {ScoreMetrSettings} from \"./counterSettings/ScoreMetrSettings\";\n\n\nconst App: FC = () => {\n    const [counter, setCounter] = useState<number>(0)\n    const [maxValue, setMaxValue] = useState<number>(5)\n    const [startValue, setStartValue] = useState<number>(0)\n    const [startText, setStartText] = useState<boolean>(true)\n    const [disableIncState,setDisableIncState] = useState<boolean>(true)\n\n        useEffect(()=> {\n            let start = localStorage.getItem('startValue')\n            let max = localStorage.getItem('maxValue')\n            if(start && max) {\n                setMaxValue(+max)\n                setStartValue(+start)\n            }\n        },[])\n\n\n    function incCounter() {\n        if (counter < maxValue) {\n            setCounter(counter + 1)\n        }\n    }\n    function resetCounter() {\n        setCounter(startValue)\n    }\n\n    return (\n        <div className='counter-wrapper'>\n            <ScoreMetr\n                maxValue={maxValue}\n                resetCounter={resetCounter}\n                counter={counter}\n                incCounter={incCounter}\n                startValue={startValue}\n                startText={startText}\n                setStartText={setStartText}\n                disableIncState={disableIncState}\n               />\n            <ScoreMetrSettings maxValue={maxValue}\n                               startValue={startValue}\n                               setMaxValue={setMaxValue}\n                               setStartValue={setStartValue}\n                               setCounter={setCounter}\n                               setStartText={setStartText}\n                               setDisableIncState={setDisableIncState}\n                               />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}